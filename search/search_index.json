{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#grip","title":"Grip","text":"![GitHub Workflow Status (with event)](https://img.shields.io/github/actions/workflow/status/CogitoNTNU/Grip/ci.yml) ![GitHub top language](https://img.shields.io/github/languages/top/CogitoNTNU/Grip) ![GitHub language count](https://img.shields.io/github/languages/count/CogitoNTNU/Grip) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT) [![Project Version](https://img.shields.io/badge/version-0.0.1-blue)](https://img.shields.io/badge/version-0.0.1-blue)   \ud83d\udccb Table of contents   - [Grip](#Grip)   - [Description](#description)   - [\ud83d\udee0\ufe0f Prerequisites](#%EF%B8%8F-prerequisites)   - [Getting started](#getting-started)   - [Usage](#usage)     - [\ud83d\udcd6 Generate Documentation Site](#-generate-documentation-site)   - [Testing](#testing)   - [Team](#team)     - [License](#license)"},{"location":"#description","title":"Description","text":"<p>The Grip project develops a functional robotic hand controlled by muscle activity and/or neural signals. Using non-invasive sensors (such as surface EMG), the system translates user intent into precise hand movements. The project combines CAD-based mechanical design, embedded systems, and AI-driven gesture recognition for intuitive and natural control</p>"},{"location":"#prerequisites","title":"\ud83d\udee0\ufe0f Prerequisites","text":"<ul> <li>Git: Ensure that git is installed on your machine. Download Git</li> <li>Python 3.12: Required for the project. Download Python</li> <li>UV: Used for managing Python environments. Install UV</li> <li>Docker (optional): For DevContainer development. Download Docker</li> </ul>"},{"location":"#getting-started","title":"Getting started","text":"<ol> <li>Clone the repository:</li> </ol> <p><code>sh    git clone https://github.com/CogitoNTNU/Grip.git    cd Grip</code></p> <ol> <li>Install dependencies:</li> </ol> <p><code>sh    uv sync</code></p> <ol> <li>Set up pre commit (only for development):    <code>sh    uv run pre-commit install</code></li> </ol>"},{"location":"#usage","title":"Usage","text":"<p>To run the project, run the following command from the root directory of the project:</p>"},{"location":"#generate-documentation-site","title":"\ud83d\udcd6 Generate Documentation Site","text":"<p>To build and preview the documentation site locally:</p> <pre><code>uv run mkdocs build\nuv run mkdocs serve\n</code></pre> <p>This will build the documentation and start a local server at http://127.0.0.1:8000/ where you can browse the docs and API reference. Get the documentation according to the lastes commit on main by viewing the <code>gh-pages</code> branch on GitHub: https://cogitontnu.github.io/Grip/.</p>"},{"location":"#testing","title":"Testing","text":"<p>To run the test suite, run the following command from the root directory of the project:</p> <pre><code>uv run pytest --doctest-modules --cov=src --cov-report=html\n</code></pre>"},{"location":"#team","title":"Team","text":"<p>This project would not have been possible without the hard work and dedication of all of the contributors. Thank you for the time and effort you have put into making this project a reality.</p> <p></p>"},{"location":"#license","title":"License","text":"<p>Distributed under the MIT License. See <code>LICENSE</code> for more information.</p>"},{"location":"uart/","title":"UART Communication between Arduino UNO and Raspberry Pi 5","text":"<p>This README describes how to set up a simple UART link between an Arduino UNO and a Raspberry Pi 5, for streaming analog sensor values (e.g. MyoWare muscle sensor).</p>"},{"location":"uart/#hardware-connections","title":"Hardware Connections","text":"<ul> <li>Arduino UNO TX (D1) \u2192 Voltage divider \u2192 Raspberry Pi GPIO15 (RXD, physical pin 10)</li> <li>Arduino GND \u2192 Raspberry Pi GND (physical pin 6)</li> <li>Do not connect Arduino RX unless you also want to send data back from the Pi.</li> </ul>"},{"location":"uart/#voltage-divider","title":"Voltage Divider","text":"<p>Since Arduino UNO TX is 5V and the Pi only accepts 3.3V: - R1 = 1.8 k\u03a9 (between UNO TX and divider node) - R2 = 3.3 k\u03a9 (between divider node and GND) - Divider node \u2192 Pi RX</p> <p>This scales 5V down to ~3.3V.</p>"},{"location":"uart/#raspberry-pi-configuration","title":"Raspberry Pi Configuration","text":"<ol> <li>Enable the UART:    <code>bash    sudo raspi-config</code></li> <li>Disable login shell over serial</li> <li>Enable serial port hardware</li> <li> <p>Reboot</p> </li> <li> <p>The Pi 5 UART is available at <code>/dev/ttyAMA0</code>.</p> </li> </ol>"},{"location":"uart/#testing-the-connection","title":"Testing the Connection","text":""},{"location":"uart/#check-wiring-and-stream-at-9600-baud","title":"Check wiring and stream at 9600 baud","text":"<p>On Raspberry Pi:</p> <pre><code>stty -F /dev/ttyAMA0 9600 cs8 -cstopb -parenb raw -echo -ixon -ixoff -crtscts\ncat /dev/ttyAMA0\n</code></pre> <p>You should see text like <code>HELLO 1</code>, <code>HELLO 2</code>, etc. from the Arduino test script.</p>"},{"location":"uart/#using-higher-baud-rates","title":"Using higher baud rates","text":"<p>You can increase to 57600 or 115200 once wiring is stable:</p> <pre><code>stty -F /dev/ttyAMA0 57600 cs8 -cstopb -parenb raw -echo -ixon -ixoff -crtscts\ncat /dev/ttyAMA0\n</code></pre> <p>If you see gibberish, lower the baud rate (9600 is always safe).</p>"},{"location":"uart/#python-reader","title":"Python Reader","text":"<p>This repository includes <code>uart.py</code> in the <code>src/</code> folder. It automatically opens <code>/dev/ttyAMA0</code> at the configured baud (default 9600) and prints each line.</p> <p>Run it with:</p> <pre><code>python uart.py\n</code></pre>"},{"location":"uart/#workflow-summary","title":"Workflow Summary","text":"<ol> <li>Upload the Arduino sketch from <code>arduino_ide/</code> to your UNO.</li> <li>Connect TX\u2192RX via voltage divider and GND\u2194GND.</li> <li>On the Raspberry Pi:</li> <li>Configure the UART with <code>stty</code></li> <li>Run <code>cat /dev/ttyAMA0</code> to verify data</li> <li>Run <code>python uart.py</code> to stream data into Python</li> </ol>"},{"location":"uart/#notes","title":"Notes","text":"<ul> <li>Keep wires short and GNDs connected.</li> <li>If using other Arduino boards (Leonardo, Mega, ESP32), the hardware serial port name may differ (<code>Serial1</code>, etc.).</li> <li>Baud rate must match on both Arduino and Pi.</li> </ul>"},{"location":"reference/src/","title":"src","text":""},{"location":"reference/src/#src","title":"src","text":""}]}